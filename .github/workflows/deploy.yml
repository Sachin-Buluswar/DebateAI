name: Deploy

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.erisdebate.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          echo "Deploying image $IMAGE_TAG to staging"
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$STAGING_SSH_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          
          # Deploy using docker-compose
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/staging_key $STAGING_USER@$STAGING_HOST << 'EOF'
            cd /opt/eris-debate
            docker-compose pull
            docker-compose up -d --no-deps --build web
            docker system prune -f
          EOF

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        run: |
          echo "Running database migrations on staging"
          # npm run migrate:deploy

      - name: Verify deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          for i in {1..30}; do
            if curl -s -f https://staging.erisdebate.com/api/health > /dev/null; then
              echo "Staging deployment successful"
              exit 0
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done
          echo "Staging deployment verification failed"
          exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://erisdebate.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              required_contexts: [],
              production_environment: true,
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to production
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        run: |
          echo "Deploying image $IMAGE_TAG to production"
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$PRODUCTION_SSH_KEY" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key
          
          # Deploy using docker-compose with zero-downtime
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/production_key $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            cd /opt/eris-debate
            
            # Pull new image
            docker-compose pull
            
            # Start new containers alongside old ones
            docker-compose up -d --no-deps --scale web=2 --no-recreate web
            
            # Wait for new containers to be healthy
            sleep 30
            
            # Remove old containers
            docker-compose up -d --no-deps --scale web=1 --no-recreate web
            
            # Clean up
            docker system prune -f
          EOF

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          echo "Running database migrations on production"
          # npm run migrate:deploy

      - name: Verify deployment
        run: |
          echo "Waiting for production deployment to be ready..."
          for i in {1..30}; do
            if curl -s -f https://erisdebate.com/api/health > /dev/null; then
              echo "Production deployment successful"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 10
          done

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}',
              environment_url: 'https://erisdebate.com',
              description: 'Deployment ${{ job.status }}'
            });

  # Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: |
          npm install -g newman
          npm install -g @playwright/test

      - name: Determine test URL
        id: test-url
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "url=https://erisdebate.com" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          else
            echo "url=https://staging.erisdebate.com" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Run API smoke tests
        run: |
          echo "Running API smoke tests against ${{ steps.test-url.outputs.url }}"
          # newman run tests/postman/smoke-tests.json --env-var "baseUrl=${{ steps.test-url.outputs.url }}"

      - name: Run UI smoke tests
        run: |
          echo "Running UI smoke tests against ${{ steps.test-url.outputs.url }}"
          # npx playwright test tests/e2e/smoke.spec.ts --project=chromium

  # Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, smoke-tests]
    if: failure()
    steps:
      - name: Determine rollback environment
        id: rollback-env
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Rollback deployment
        run: |
          echo "Rolling back ${{ steps.rollback-env.outputs.environment }} deployment"
          # Add rollback logic here

      - name: Notify team
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ Deployment to ${{ steps.rollback-env.outputs.environment }} failed and was rolled back.'
            });